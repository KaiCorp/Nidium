#!/usr/bin/env python2.7

# Copyright 2016 Nidium Inc. All rights reserved.
# Use of this source code is governed by a MIT license
# that can be found in the LICENSE file.

import os

from konstructor import Deps
from konstructor import CommandLine
from konstructor import Build
from konstructor import Builder
from konstructor import Platform
from konstructor import Variables
from konstructor import Konstruct
from konstructor import Tests
from konstructor import Utils
from konstructor import Log
from konstructor import ROOT, OUTPUT

Deps.set(
    "mozilla-central",
    "leveldb",
    "http-parser",
    "jsoncpp",
    Deps.Konstruct("network", "src/libapenetwork/configure")
)

if Platform.system == "Darwin":
    Platform.setEnviron("CXXFLAGS+=-stdlib=libc++ -mmacosx-version-min=10.7")
    Platform.setEnviron("CPPFLAGS+=-stdlib=libc++ -mmacosx-version-min=10.7")
    # Some third-party libraries (skia, angle, mozilla-central)
    # produce binaries. So we need to set LDFLAGS too.
    Platform.setEnviron("LDFLAGS+=-stdlib=libc++ -mmacosx-version-min=10.7")
elif Platform.system == "Windows":
    Platform.setCompiler("cl", "cl")
    # Some configure/makefiles use these environement variables
    Platform.setEnviron("LD=Link")
    Platform.setEnviron("AR=lib")

    # Depot tools only ship with 64bit ninja, use our own copy on 32bit system
    if Platform.wordSize == 32:
        Deps.set("ninja")

DEPEDENCY_REPO = Variables.get("depsRepo")
CONFIGURE_PATH = os.path.dirname(os.path.realpath(__file__))
Gyp = Builder.Gyp

@Deps.register("leveldb")
def leveldb():
    env = Utils.Env()
    output = "libleveldb.a"
    patchs = [os.path.join(CONFIGURE_PATH, "patch", "leveldb.patch")]
    # leveldb make doest not detect CXXFLAGS changes, so we force "make clean"
    build = ["make clean", "make"]

    if Platform.system == "Windows":
        env.set("TARGET_OS", "NATIVE_WINDOWS")
        env.set("AR_FLAGS", "-nologo -out:")
        env.set("CXXFLAGS", " -EHsc -MD")
        patchs = [os.path.join(CONFIGURE_PATH, "patch", "leveldb_windows.patch")]

        # -j1 : Parallel build seems to lock make
        # liblevedb.a : Tell make to ignore the shared libray, just create the static one
        build = ["make -j1 libleveldb.a"]
        output = ["libleveldb.a", "libleveldb.lib"]
    else:
        if Konstruct.config("android"):
            env.update(Variables.get("androidEnvClang"))
            env.set("TARGET_OS", "OS_ANDROID_CROSSCOMPILE")

        if Konstruct.config("asan"):
            # Fix ASAN container overflow false positive :
            # https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow#false-positives
            env.append("CXXFLAGS", "-fsanitize=address")

    return {
        "location": Deps.GitRepo("https://github.com/bitcoin-core/leveldb.git", revision="d40bc3f"),
        "build": build,
        "patchs": patchs,
        "outputs": [output],
        "env": env
    }

@Deps.register("mozilla-central")
def mozilla():
    env = Utils.Env()

    configure = "../configure\
        --disable-shared-js\
        --disable-jemalloc\
        --disable-tests \
        --enable-nspr-build \
        --enable-ctypes"
    make = "make"
    patchs = []
    outputs = [
        "mozglue/build/libmozglue.a$", 
        "dist/lib/libnspr4.a$", 
        "js/src/libjs_static.a$"
    ] 

    if Platform.system == "Windows":
        env.set("TARGET_CPU", ("x86" if Platform.wordSize == 32 else "x64"))
        patchs = [os.path.join(CONFIGURE_PATH, "patch", "mozilla-central_windows.patch")]
        make = "mozmake"
        # mozilla-central configure script needs to be run with "bash"
        configure = "bash " + configure + " --enable-build-backend=VisualStudio"

        if Platform.wordSize == 64:
            configure += " --target=x86_64-pc-mingw32 --host=x86_64-pc-mingw32"

        outputs = [
            "dist/lib/nspr4.lib",
            "dist/lib/plds4.lib",
            "dist/lib/plc4.lib",
            "mozglue/build/mozglue.lib", 
            "js/src/js_static.lib",
            "mfbt/Compression.obj",
            "mfbt/Decimal.obj",
            "intl/icu/target/lib/icuin.lib",
            "intl/icu/target/lib/icuuc.lib",
            "intl/icu/target/lib/icudt.lib",
        ]

        # Copy needed DLLs to bin/ directory
        for dll in ["dist/bin/icudt56.dll", "dist/bin/icuin56.dll", "dist/bin/icuuc56.dll", "dist/bin/nspr4.dll"]:
            outputs.append({
                "src": dll,
                 "dst": os.path.join(ROOT, "bin", os.path.basename(dll))
            })
    elif Konstruct.config("android"):
        configure += " " + " ".join([
            "--with-android-cxx-stl=libc++",
            "--with-android-gnu-compiler-version=4.9",
            "--with-android-ndk=%s" % (Platform.getEnviron("ANDROID_NDK_ROOT")),
            "--with-android-toolchain=%s" % (Variables.get("toolchainPath")),
            "--with-android-platform=%s/sysroot/" % (Variables.get("toolchainPath")),
            "--with-android-version=%d" % (Variables.get("androidNDKAPIVersion")),
            "--target=%s" % (Variables.get("targetTriplet"))
        ])

        patchs = [os.path.join(CONFIGURE_PATH, "patch", "mozilla_android.patch")]

        env.update(Variables.get("androidEnvGcc"))
        env.set("ANDROID_CPU_ARCH", "armeabi-v7a")

    return {
        "chdir": "js/src/obj",
        "location": DEPEDENCY_REPO + "/mozjs-45.5.3.tar.bz2",
        "build": [configure, make],
        "patchs": patchs,
        "outputs": outputs + ["js/src/js-config.h$"]
    }

@Deps.register("http-parser")
def httpParser():
    env = Utils.Env()
    patchs = []
    build = ["make package"]
    output = "libhttp_parser.a"

    if Platform.system == "Windows":
        platform = "Win32" if Platform.wordSize == 32 else "x64"
        gyp = "..\gyp\gyp.bat --depth . -DOS=win -f msvs\
               -G Platform=%s -Dplatform=%s" % (platform, platform)
        build = [gyp, Platform.MsBuild("http_parser.vcxproj")]
        output = "Release/lib/http_parser.lib"
        patchs = [os.path.join(CONFIGURE_PATH, "patch", "http_parser_windows.patch")]
    elif Konstruct.config("android"):
        env.update(Variables.get("androidEnvClang"))

    return {
        "location": Deps.GitRepo("https://github.com/nodejs/http-parser.git", tag="v2.6.2"),
        "build": build,
        "env": env,
        "patchs": patchs,
        "outputs": [output]
    }

@Deps.register("jsoncpp")
def jsoncpp():
    return {
        "location": Deps.GitRepo("https://github.com/open-source-parsers/jsoncpp.git", tag="1.7.2"),
        "build": ["python amalgamate.py"]
    }

# Windows only ninja : 
#   - Use drop in replacement for args.h
#   - 32bit version is not available in depot_tools
@Deps.register("ninja")
def ninja():
    if Platform.system != "Windows":
        Utils.exit("The '%s' platform has a ninja binary in depot tools" % (Platform.system))

    return {
        "location": "https://github.com/ninja-build/ninja/archive/v1.7.2.tar.gz",
        "build": ["python configure.py --bootstrap", "cp ninja.exe ../depot_tools/"]
    }

@CommandLine.option("--unit-tests")
def testCore(unitTests):
    if not unitTests:
        return
    cdir = "../build/tests/"
    if Platform.system == "Windows":
        cdir = cdir[1:]
    Tests.register([
        ("libnidiumcore-unittests", cdir)], builders=[
            Gyp("gyp/libnidiumcore-tests.gyp",
                defines={"nidium_js_disable_window_global": 1,
                         "nidium_product_define": "NIDIUM_UNIT_TESTS"})
        ])

@CommandLine.option("--asan", default=False)
def asan(asan):
    if asan:
        Konstruct.setConfigs(["asan"])
        Gyp.set("asan", 1)

@CommandLine.option("--cpu-profiling", default=False)
def profiler(profiler):
    if profiler:
        Gyp.set("profiler", 1)
        Deps.set("gperftools")
        Deps.set("pprof")

        @Konstruct.hook("postBuild")
        def profilerPostBuild(success):
            if not success:
                return

            Log.info("-------------------------------------")
            Log.info("You have enabled CPU profiling, you must set the following environement variables to enable CPU profiling when running your application : ")
            Log.info("CPUPROFILE=/tmp/profile.nidium")
            Log.info("LD_LIBRARY_PATH=" + ROOT + "/build/third-party/${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}")
            Log.info("-------------------------------------")

@CommandLine.option("--unit-tests")
def nidiumCoreTests(unitTests):
    if not unitTests:
        return

    def query(port, useSSL=False):
        import urllib2
        try:
            urllib2.urlopen("http%s://tests.nidium.com:%d/http/hello" % ("s" if useSSL else "", port)).read()
            return True
        except Exception as e:
            Log.info("Failed to contact tests server %s" % (e))
            return False

    @Konstruct.hook("preTests")
    def preNidiumCoreTests():
        if not query(8888) or not query(8443, useSSL=True):
            Utils.exit("Tests server is down. Cannot run tests.")

@CommandLine.option("--auto-tests", default=False)
def autoTestStudio(autoTests):
    if not autoTests:
        return

    @Konstruct.hook("postBuild")
    def runNidiumAutoTests(success):
        Tests.runTest(success)

if __name__ == '__main__':
    if not Builder.Gyp._defines.has_key('nidium_version'):
        Gyp.set('nidium_version', 'library')

    Gyp.setArgs("--depth ./ --include=gyp/config.gypi --include=gyp/common.gypi --include=src/libapenetwork/gyp/config.gypi")
    Gyp.set("nidium_product_define", "NIDIUM_PRODUCT_LIBRARY")
    Build.add(Gyp("src/libapenetwork/gyp/network.gyp"));
    Build.add(Gyp("gyp/libnidiumcore.gyp"))

    Konstruct.start()
