#!/usr/bin/env python2.7

# Copyright 2016 Nidium Inc. All rights reserved.
# Use of this source code is governed by a MIT license
# that can be found in the LICENSE file.

import os

from konstructor import Deps
from konstructor import CommandLine
from konstructor import Build
from konstructor import Builder
from konstructor import Platform
from konstructor import Variables
from konstructor import Konstruct
from konstructor import Tests
from konstructor import Utils
from konstructor import Log
from konstructor import ROOT, OUTPUT

Deps.set(
    "nspr",
    "mozilla-central",
    "leveldb",
    "http-parser",
    "jsoncpp",
    Deps.Konstruct("network", "src/libapenetwork/configure")
)

DEPEDENCY_REPO = Variables.get("depsRepo")
CONFIGURE_PATH = os.path.dirname(os.path.realpath(__file__))
Gyp = Builder.Gyp

@Deps.register("leveldb")
def leveldb():
    if Konstruct.config("ios", "tvos"):
        # Skip leveldb for now on iOS/tvOS
        Gyp.set("nidium_leveldb", 0);
        return {}

    cxxFlags = os.environ.get("CXXFLAGS", "")
    env = Utils.Env()

    if Konstruct.config("asan"):
        # Fix ASAN container overflow false positive :
        # https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow#false-positives
        env.append("CXXFLAGS", "-fsanitize=address")

    if Konstruct.config("android"):
        env.update(Variables.get("androidEnvClang"))
        env.set("TARGET_OS", "OS_ANDROID_CROSSCOMPILE")
    elif Konstruct.config("ios", "tvos"):
        env.update(Variables.get("appleSDKEnv"))
        env.set("TARGET_OS", "IOS")

    return {
        "location": Deps.GitRepo("https://github.com/google/leveldb.git", tag="v1.18"),
        # leveldb make doest not detect CXXFLAGS changes, so we force "make clean"
        "build": ["make clean","make"],
        "patchs": [os.path.join(CONFIGURE_PATH, "patch", "leveldb.patch")],
        "env": env,
        "outputs": ["libleveldb(.a|.lib)"]
    }

@Deps.register("nspr")
def nspr():
    if not Konstruct.config("ios", "tvos"):
        # Other configuration are built straight from
        # spidermonkey configure script
        return {}

    appleEnv = Variables.get("appleSDKEnv")
    env = Utils.Env()

    env.set("HOST_CC", "clang")
    env.set("HOST_CXX", "clang++")
    # Set empty HOST_XXXX flags otherwise they inherit from target cflags
    env.set("HOST_CFLAGS", " ")
    env.set("HOST_LDFLAGS", " ")
    env.set("HOST_CXXFLAGS", " ")
    env.set("HOST_CPPFLAGS", " ")
    # There are no HOST_CPPFLAGS so set them to an empty string to make sure this doesn't brake host compiler
    env.set("CPPFLAGS", " ")

    # Since we are cross-compiling we need to provide the name of various utilities
    env.set("AR", "ar")
    env.set("RANLIB", "ranlib")
    env.set("STRIP", "strip")

    # Set iOS/tvOS SDK and version
    sdkName = Variables.get("appleSDK")
    sdkMinVersion = Variables.get("appleSDKMinVersion")
    env.set("CFLAGS", appleEnv.get("CFLAGS") + " -m%s-version-min=%s" % (sdkName, sdkMinVersion))
    env.set("CXXFLAGS",appleEnv.get("CXXFLAGS") + " -m%s-version-min=%s" % (sdkName, sdkMinVersion))
    env.set("LDFLAGS", appleEnv.get("LDFLAGS") + " -m%s-version-min=%s" % (sdkName, sdkMinVersion))

    env.set("NSPR_CFLAGS", "-I%s/mozilla-central/nsprpub/obj/dist/include/nspr/" % os.getcwd())

    # Store the environement, so spidermonkey build can re-use it
    Variables.set("mozillaAppleEnv", env);

    build = [
        "../configure --disable-nspr-threads --disable-debug --enable-optimize --target=%s --host=x86_64-apple-darwin --enable-64bit" % (Variables.get("targetTriplet")),
        "make"
    ]

    return {
        "chdir": "mozilla-central/nsprpub/obj/",
        "build": build,
        "env": env,
        "outputs": ["dist/lib/lib(plc|plds|nspr)4(.a)"],
        "patchs":  [os.path.join(CONFIGURE_PATH, "patch", "mozilla_ios.patch")]
    }

@Deps.register("mozilla-central")
def mozilla():
    env = Utils.Env()
    build = []
    patchs = []
    outputs = ["mozglue/build/libmozglue.a$", "dist/lib/libnspr4.a$", "js/src/libjs_static.a$", "js/src/js-config.h$"]

    configure = "../configure\
            --disable-shared-js\
            --disable-jemalloc\
            --disable-tests\
            --enable-nspr-build \
            --enable-ctypes"

    if Konstruct.config("android"):
        configure += " " + " ".join([
            "--with-android-cxx-stl=libc++",
            "--with-android-gnu-compiler-version=4.9",
            "--with-android-ndk=%s" % (Platform.getEnviron("ANDROID_NDK_ROOT")),
            "--with-android-toolchain=%s" % (Variables.get("toolchainPath")),
            "--with-android-platform=%s/sysroot/" % (Variables.get("toolchainPath")),
            "--with-android-version=%d" % (Variables.get("androidNDKAPIVersion")),
            "--target=%s" % (Variables.get("targetTriplet"))
        ])
        env.update(Variables.get("androidEnvGcc"))
        env.set("ANDROID_CPU_ARCH", "armeabi-v7a")
        patchs.append(os.path.join(CONFIGURE_PATH, "patch", "mozilla_android.patch"))
    elif Konstruct.config("ios", "tvos"):
        # XXX : We are not using spidermonkey --with-ios-sdk
        # and --with-ios-target as the configure script does
        # not handle appleTV and arm64
        env = Variables.get("mozillaAppleEnv")

        # We are building for ios
        env.set("MOZ_IOS", "1")

        # Remove nspr from outputs as it's built in a standalone way
        outputs.remove("dist/lib/libnspr4.a$")

        configure += " " + " ".join([
            "--without-intl-api", # Not supported on iOS
            "--disable-ion --disable-jm --disable-tm --disable-methodjit", # Disable all JIT stuff
            "--disable-nspr-build", # Already built in a standalone way
            "--with-nspr-cflags=\"%s\"" % (env.get("NSPR_CFLAGS")),
            "--target=%s" % (Variables.get("targetTriplet")),
            "--with-thumb=yes"
        ])

    if Konstruct.config("debug", "valgring"):
        configure += " --enable-debug --disable-optimize"

    if Konstruct.config("valgrind"):
        configure += " --enable-valgrind "

    return {
        "chdir": "js/src/obj",
        "location": DEPEDENCY_REPO + "/mozjs-45.5.3.tar.bz2",
        "build": build + [configure, "make"],
        "env": env,
        "outputs": outputs,
        "patchs": patchs,
    }

@Deps.register("http-parser")
def httpParser():
    env = Utils.Env()

    if Konstruct.config("android"):
        env.update(Variables.get("androidEnvClang"))
    elif Konstruct.config("ios", "tvos"):
        env.update(Variables.get("appleSDKEnv"))

    return {
        "location": Deps.GitRepo("https://github.com/nodejs/http-parser.git", tag="v2.6.2"),
        "build": ["make package"],
        "env": env,
        "outputs": ["libhttp_parser.a"]
    }

@Deps.register("jsoncpp")
def jsoncpp():
    return {
        "location": Deps.GitRepo("https://github.com/open-source-parsers/jsoncpp.git", tag="1.7.2"),
        "build": ["python amalgamate.py"]
    }

@CommandLine.option("--unit-tests")
def testCore(unitTests):
    if not unitTests:
        return

    cwd = os.path.dirname(os.path.realpath(__file__))

    Tests.register([
        "build/tests/libnidiumcore-unittests"
        ], builders=[
            Gyp("gyp/libnidiumcore-tests.gyp",
                defines={"nidium_js_disable_window_global": 1,
                         "nidium_product_define": "NIDIUM_UNIT_TESTS"})
        ])

@CommandLine.option("--asan", default=False)
def asan(asan):
    if asan:
        Konstruct.setConfigs(["asan"])
        Gyp.set("asan", 1)

@CommandLine.option("--cpu-profiling", default=False)
def profiler(profiler):
    if profiler:
        Gyp.set("profiler", 1)
        Deps.set("gperftools")
        Deps.set("pprof")

        @Konstruct.hook("postBuild")
        def profilerPostBuild(success):
            if not success:
                return

            Log.info("-------------------------------------")
            Log.info("You have enabled CPU profiling, you must set the following environement variables to enable CPU profiling when running your application : ")
            Log.info("CPUPROFILE=/tmp/profile.nidium")
            Log.info("LD_LIBRARY_PATH=" + ROOT + "/build/third-party/${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}")
            Log.info("-------------------------------------")

@CommandLine.option("--unit-tests")
def nidiumCoreTests(unitTests):
    if not unitTests:
        return

    def query(port, useSSL=False):
        import urllib2
        try:
            urllib2.urlopen("http%s://tests.nidium.com:%d/http/hello" % ("s" if useSSL else "", port)).read()
            return True
        except Exception as e:
            Log.info("Failed to contact tests server %s" % (e))
            return False

    @Konstruct.hook("preTests")
    def preNidiumCoreTests():
        if not query(8888) or not query(8443, useSSL=True):
            Utils.exit("Tests server is down. Cannot run tests.")

@CommandLine.option("--auto-tests", default=False)
def autoTestStudio(autoTests):
    if not autoTests:
        return

    @Konstruct.hook("postBuild")
    def runNidiumAutoTests(success):
        Tests.runTest(success)

if __name__ == '__main__':
    if not Builder.Gyp._defines.has_key('nidium_version'):
        Gyp.set('nidium_version', 'library')

    Gyp.setArgs("--depth ./ --include=gyp/config.gypi --include=gyp/common.gypi --include=src/libapenetwork/gyp/config.gypi")
    Gyp.set("nidium_product_define", "NIDIUM_PRODUCT_LIBRARY")
    Build.add(Gyp("src/libapenetwork/gyp/network.gyp"));
    Build.add(Gyp("gyp/libnidiumcore.gyp"))

    Konstruct.start()
